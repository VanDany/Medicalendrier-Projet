//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RDVMedicalEntities : DbContext
    {
        public RDVMedicalEntities()
            : base("name=RDVMedicalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AddLocal(Nullable<int> maisonMedID, string nomLocal)
        {
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("maisonMedID", maisonMedID) :
                new ObjectParameter("maisonMedID", typeof(int));
    
            var nomLocalParameter = nomLocal != null ?
                new ObjectParameter("nomLocal", nomLocal) :
                new ObjectParameter("nomLocal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLocal", maisonMedIDParameter, nomLocalParameter);
        }
    
        public virtual int AddMaisonMed(string nom, string adresse, string commune)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("adresse", adresse) :
                new ObjectParameter("adresse", typeof(string));
    
            var communeParameter = commune != null ?
                new ObjectParameter("commune", commune) :
                new ObjectParameter("commune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMaisonMed", nomParameter, adresseParameter, communeParameter);
        }
    
        public virtual int AddAssociation(Nullable<int> medecin_ID, Nullable<int> maison_Med_ID, Nullable<int> specialite_ID, Nullable<int> dureeConsult, Nullable<bool> verif)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            var maison_Med_IDParameter = maison_Med_ID.HasValue ?
                new ObjectParameter("Maison_Med_ID", maison_Med_ID) :
                new ObjectParameter("Maison_Med_ID", typeof(int));
    
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            var dureeConsultParameter = dureeConsult.HasValue ?
                new ObjectParameter("DureeConsult", dureeConsult) :
                new ObjectParameter("DureeConsult", typeof(int));
    
            var verifParameter = verif.HasValue ?
                new ObjectParameter("Verif", verif) :
                new ObjectParameter("Verif", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAssociation", medecin_IDParameter, maison_Med_IDParameter, specialite_IDParameter, dureeConsultParameter, verifParameter);
        }
    
        public virtual int AddConfirmation(string identifiant)
        {
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddConfirmation", identifiantParameter);
        }
    
        public virtual int AddPresences(Nullable<int> medecin_ID, Nullable<int> maison_Med_ID, Nullable<System.DateTime> datePresence, Nullable<System.TimeSpan> heure_Debut, Nullable<System.TimeSpan> heure_Fin)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            var maison_Med_IDParameter = maison_Med_ID.HasValue ?
                new ObjectParameter("Maison_Med_ID", maison_Med_ID) :
                new ObjectParameter("Maison_Med_ID", typeof(int));
    
            var datePresenceParameter = datePresence.HasValue ?
                new ObjectParameter("DatePresence", datePresence) :
                new ObjectParameter("DatePresence", typeof(System.DateTime));
    
            var heure_DebutParameter = heure_Debut.HasValue ?
                new ObjectParameter("Heure_Debut", heure_Debut) :
                new ObjectParameter("Heure_Debut", typeof(System.TimeSpan));
    
            var heure_FinParameter = heure_Fin.HasValue ?
                new ObjectParameter("Heure_Fin", heure_Fin) :
                new ObjectParameter("Heure_Fin", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPresences", medecin_IDParameter, maison_Med_IDParameter, datePresenceParameter, heure_DebutParameter, heure_FinParameter);
        }
    
        public virtual ObjectResult<SelectAllMedecins_Result> SelectAllMedecins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllMedecins_Result>("SelectAllMedecins");
        }
    
        public virtual ObjectResult<SelectAllPresencesByMed_Result> SelectAllPresencesByMed(Nullable<int> medecinID, Nullable<System.DateTime> date)
        {
            var medecinIDParameter = medecinID.HasValue ?
                new ObjectParameter("MedecinID", medecinID) :
                new ObjectParameter("MedecinID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllPresencesByMed_Result>("SelectAllPresencesByMed", medecinIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectAllSpecialites_Result> SelectAllSpecialites()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllSpecialites_Result>("SelectAllSpecialites");
        }
    
        public virtual ObjectResult<SelectMedByID_Result> SelectMedByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectMedByID_Result>("SelectMedByID", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SelectMedByName(string nom, string prenom)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectMedByName", nomParameter, prenomParameter);
        }
    
        public virtual ObjectResult<SelectPlanningByDate_Result> SelectPlanningByDate(Nullable<int> medecinID, Nullable<System.DateTime> date)
        {
            var medecinIDParameter = medecinID.HasValue ?
                new ObjectParameter("MedecinID", medecinID) :
                new ObjectParameter("MedecinID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPlanningByDate_Result>("SelectPlanningByDate", medecinIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.TimeSpan>> SelectRDVforDisponibility(Nullable<int> recap_ID, Nullable<System.DateTime> date)
        {
            var recap_IDParameter = recap_ID.HasValue ?
                new ObjectParameter("Recap_ID", recap_ID) :
                new ObjectParameter("Recap_ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.TimeSpan>>("SelectRDVforDisponibility", recap_IDParameter, dateParameter);
        }
    
        public virtual int AddPatient(string nom, string prenom, Nullable<System.DateTime> dateDeNaissance)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateDeNaissanceParameter = dateDeNaissance.HasValue ?
                new ObjectParameter("dateDeNaissance", dateDeNaissance) :
                new ObjectParameter("dateDeNaissance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient", nomParameter, prenomParameter, dateDeNaissanceParameter);
        }
    
        public virtual int AddRDV(Nullable<int> patientID, Nullable<int> recapID, Nullable<System.DateTime> date, Nullable<System.TimeSpan> heureDebut, Nullable<System.TimeSpan> heureFin, Nullable<int> localID, string identifiant)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var recapIDParameter = recapID.HasValue ?
                new ObjectParameter("RecapID", recapID) :
                new ObjectParameter("RecapID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var heureDebutParameter = heureDebut.HasValue ?
                new ObjectParameter("HeureDebut", heureDebut) :
                new ObjectParameter("HeureDebut", typeof(System.TimeSpan));
    
            var heureFinParameter = heureFin.HasValue ?
                new ObjectParameter("HeureFin", heureFin) :
                new ObjectParameter("HeureFin", typeof(System.TimeSpan));
    
            var localIDParameter = localID.HasValue ?
                new ObjectParameter("LocalID", localID) :
                new ObjectParameter("LocalID", typeof(int));
    
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRDV", patientIDParameter, recapIDParameter, dateParameter, heureDebutParameter, heureFinParameter, localIDParameter, identifiantParameter);
        }
    
        public virtual int DeleteRDVByIdentifiant(string identifiant)
        {
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRDVByIdentifiant", identifiantParameter);
        }
    
        public virtual ObjectResult<GetPatientByInfos_Result> GetPatientByInfos(string nom, string prenom, Nullable<System.DateTime> date)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientByInfos_Result>("GetPatientByInfos", nomParameter, prenomParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectAllLocaux_Result> SelectAllLocaux(Nullable<int> maisonMedID)
        {
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllLocaux_Result>("SelectAllLocaux", maisonMedIDParameter);
        }
    
        public virtual ObjectResult<SelectAllMaisonMed_Result> SelectAllMaisonMed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllMaisonMed_Result>("SelectAllMaisonMed");
        }
    
        public virtual ObjectResult<SelectAllPatients_Result> SelectAllPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllPatients_Result>("SelectAllPatients");
        }
    
        public virtual ObjectResult<Nullable<int>> SelectNbLocaux()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectNbLocaux");
        }
    
        public virtual ObjectResult<SelectPresencesByMed_Result> SelectPresencesByMed(Nullable<int> iD, Nullable<int> maisonMedID, Nullable<System.DateTime> date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPresencesByMed_Result>("SelectPresencesByMed", iDParameter, maisonMedIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectRDVByIdentifiant_Result> SelectRDVByIdentifiant(string identifiant)
        {
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVByIdentifiant_Result>("SelectRDVByIdentifiant", identifiantParameter);
        }
    
        public virtual ObjectResult<SelectRDVByPatientID_Result> SelectRDVByPatientID(Nullable<int> patient_ID, Nullable<System.DateTime> date)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVByPatientID_Result>("SelectRDVByPatientID", patient_IDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectRDVforLocaux_Result> SelectRDVforLocaux(Nullable<int> maisonMedID, Nullable<System.DateTime> date)
        {
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVforLocaux_Result>("SelectRDVforLocaux", maisonMedIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectAllDispo_Result> SelectAllDispo(Nullable<int> specialiteID, Nullable<int> maisonMedID, Nullable<System.DateTime> date)
        {
            var specialiteIDParameter = specialiteID.HasValue ?
                new ObjectParameter("SpecialiteID", specialiteID) :
                new ObjectParameter("SpecialiteID", typeof(int));
    
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllDispo_Result>("SelectAllDispo", specialiteIDParameter, maisonMedIDParameter, dateParameter);
        }
    
        public virtual int AddLienActif(Nullable<bool> lienActif, Nullable<int> recapID)
        {
            var lienActifParameter = lienActif.HasValue ?
                new ObjectParameter("LienActif", lienActif) :
                new ObjectParameter("LienActif", typeof(bool));
    
            var recapIDParameter = recapID.HasValue ?
                new ObjectParameter("RecapID", recapID) :
                new ObjectParameter("RecapID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLienActif", lienActifParameter, recapIDParameter);
        }
    
        public virtual ObjectResult<SelectMMSByMedID_Result> SelectMMSByMedID(Nullable<int> medecin_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectMMSByMedID_Result>("SelectMMSByMedID", medecin_IDParameter);
        }
    
        public virtual ObjectResult<SelectRDVaConfirmer_Result> SelectRDVaConfirmer(Nullable<int> medecin_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVaConfirmer_Result>("SelectRDVaConfirmer", medecin_IDParameter);
        }
    }
}
