//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RDVMedicalEntities_Patient : DbContext
    {
        public RDVMedicalEntities_Patient()
            : base("name=RDVMedicalEntities_Patient")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AddPatient(string nom, string prenom, Nullable<System.DateTime> dateDeNaissance)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateDeNaissanceParameter = dateDeNaissance.HasValue ?
                new ObjectParameter("dateDeNaissance", dateDeNaissance) :
                new ObjectParameter("dateDeNaissance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient", nomParameter, prenomParameter, dateDeNaissanceParameter);
        }
    
        public virtual int AddRDV(Nullable<int> patientID, Nullable<int> recapID, Nullable<System.DateTime> date, Nullable<System.TimeSpan> heureDebut, Nullable<System.TimeSpan> heureFin, Nullable<int> localID, string identifiant)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var recapIDParameter = recapID.HasValue ?
                new ObjectParameter("RecapID", recapID) :
                new ObjectParameter("RecapID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var heureDebutParameter = heureDebut.HasValue ?
                new ObjectParameter("HeureDebut", heureDebut) :
                new ObjectParameter("HeureDebut", typeof(System.TimeSpan));
    
            var heureFinParameter = heureFin.HasValue ?
                new ObjectParameter("HeureFin", heureFin) :
                new ObjectParameter("HeureFin", typeof(System.TimeSpan));
    
            var localIDParameter = localID.HasValue ?
                new ObjectParameter("LocalID", localID) :
                new ObjectParameter("LocalID", typeof(int));
    
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRDV", patientIDParameter, recapIDParameter, dateParameter, heureDebutParameter, heureFinParameter, localIDParameter, identifiantParameter);
        }
    
        public virtual int DeleteRDVByIdentifiant(string identifiant)
        {
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRDVByIdentifiant", identifiantParameter);
        }
    
        public virtual ObjectResult<GetPatientByInfos_Result> GetPatientByInfos(string nom, string prenom, Nullable<System.DateTime> date)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientByInfos_Result>("GetPatientByInfos", nomParameter, prenomParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectAllLocaux_Result> SelectAllLocaux(Nullable<int> maisonMedID)
        {
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllLocaux_Result>("SelectAllLocaux", maisonMedIDParameter);
        }
    
        public virtual ObjectResult<SelectAllMaisonMed_Result> SelectAllMaisonMed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllMaisonMed_Result>("SelectAllMaisonMed");
        }
    
        public virtual ObjectResult<SelectAllPatients_Result> SelectAllPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllPatients_Result>("SelectAllPatients");
        }
    
        public virtual ObjectResult<Nullable<int>> SelectNbLocaux()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectNbLocaux");
        }
    
        public virtual ObjectResult<SelectPresencesByMed_Result> SelectPresencesByMed(Nullable<int> iD, Nullable<int> maisonMedID, Nullable<System.DateTime> date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPresencesByMed_Result>("SelectPresencesByMed", iDParameter, maisonMedIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectRDVByIdentifiant_Result> SelectRDVByIdentifiant(string identifiant)
        {
            var identifiantParameter = identifiant != null ?
                new ObjectParameter("Identifiant", identifiant) :
                new ObjectParameter("Identifiant", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVByIdentifiant_Result>("SelectRDVByIdentifiant", identifiantParameter);
        }
    
        public virtual ObjectResult<SelectRDVByPatientID_Result> SelectRDVByPatientID(Nullable<int> patient_ID, Nullable<System.DateTime> date)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVByPatientID_Result>("SelectRDVByPatientID", patient_IDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SelectRDVforLocaux_Result> SelectRDVforLocaux(Nullable<int> maisonMedID, Nullable<System.DateTime> date)
        {
            var maisonMedIDParameter = maisonMedID.HasValue ?
                new ObjectParameter("MaisonMedID", maisonMedID) :
                new ObjectParameter("MaisonMedID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRDVforLocaux_Result>("SelectRDVforLocaux", maisonMedIDParameter, dateParameter);
        }
    }
}
